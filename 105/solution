# Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.
#
# Example 1:
#
# Input: "babad"
# Output: "bab"
# Note: "aba" is also a valid answer.
# Example 2:
#
# Input: "cbbd"
# Output: "bb"

def palindromic(s):
    i = 0
    j = i + 1
    result = s[0]
    while j < len(s):
        m, n = i, j

        palindromic = True
        while m < n:
            if s[m] == s[n]:
                m += 1
                n -= 1
            else:
                palindromic = False
                break

        if palindromic:
            result = s[i:j+1] if j+1 - i > len(result) else result
            j += 1
        else:
            if i - 1 < 0:
                i = j
                j += 1
                continue
            else:
                i -= 1

    return s if len(s) == 1 else result

    # def isPalindromic(s, i, j):
#
#     palindromic = True
#     while i < j:
#         if s[i] == s[j]:
#             i += 1
#             j -= 1
#         else:
#             palindromic = False
#             break
#
#     return palindromic

# print(palindromic('babad'))
# print(palindromic('cbbd'))
print(palindromic("bananas"))
# print(isPalindromic('cbbd', 1,2))